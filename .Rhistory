setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
library(ggplot2)
library(data.table)
library(ggplot2)
library(data.table)
# setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA")
head(data)
str(head)
str(data)
tail(data)
table (data$steps)
# setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE,
sep=",", stringsAsFactors = FALSE)
str(data)
data <-colClasses=c("numeric", "Date", "numeric")
?colClasses
# setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, colClasses=c("numeric", "Date", "numeric"))
str(data)
?read.csv
# setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv(unzip("activity.zip", "activity.csv"), header = TRUE,
sep = ",", stringsAsFactors = FALSE, colClasses=c("numeric", "Date", "numeric"))
?unzip
unique (data$date)
count (unique(data$date))
sum(unique(data$date))
table(unique(data$date))
test <- unique(data$date)
str(test)
data.sums <- data[, sum(steps, na.rm = TRUE), by date]
data.sums <- data[, (sum(steps, na.rm = TRUE), by date)]
data.sums <- data[, (sum(steps, na.rm = TRUE), by = date)]
?sum
data.sums <- data[, (sum(steps, na.rm = TRUE), by = date)]
data.sums <- data[, sum(steps, na.rm = TRUE), by = date]
data.sums <- ddply(data, .(date), summarize, steps=sum(steps))
library(plyr)
data.sums <- ddply(data, .(date), summarize, steps=sum(steps))
View(data.sums)
data.sums <- ddply(data, .(date), summarize, steps=sum(steps, na.rm = TRUE))
View(data.sums)
?mean
mean <- mean(data.sums$steps)
mean
View(data)
median <- median(data.sums$steps)
?ddply
qplot(data.sums$steps, geom = "histogram", main = "Total Number of Steps per Day",
xlab="Steps")
?qplot
data.interval <- ddply(data, .(interval), summarize, steps=mean(steps, na.rm = TRUE))
View(data.interval)
test2 <- unique(data$interval)
str(test2)
range(test2)
range(data.interval)
2355/5
qplot(interval, steps, data = data.interval, geom = "line", main = "Mean Number of Steps per Interval",
xlab="Interval", ylab = "Mean Number of Steps")
qplot(steps, interval, data = data.interval, geom = "line", main = "Mean Number of Steps per Interval",
xlab="Interval", ylab = "Mean Number of Steps")
qplot(steps, interval, data = data.interval, geom = "line", main = "Mean Number of Steps per Interval",
xlab="5-Minute Interval", ylab = "Average Number of Steps Taken")
max(data.interval$steps)
?max
data.interval[which.max(data.interval$steps),]
max <- data.interval[which.max(data.interval$steps),]
max
max <- data.interval[which.max(data.interval$steps),]
max
is.na(data$steps)
table(is.na(data$steps)
table(is.na(data$steps))
head(dat)
head(data)
table(is.na(data$date))
table(is.na(data$interval))
table(is.na(data))
table(is.na(data))
as.numeric(colSums(is.na(data))
as.numeric(colSums(is.na(data)))
names(data)
rbind(names(data), as.numeric(colSums(is.na(data))))
?table
table(as.numeric(colSums(is.na(data))))
with (data, table(steps, date, interval, useNA = "ifany")
with (data, table(steps, date, interval, useNA = "ifany"))
## Not pretty but works
NA.report <- rbind(names(data), as.numeric(colSums(is.na(data))))
NA.report
NA.report
as.table(as.numeric(colSums(is.na(data))))
as.table(as.numeric(colSums(is.na(data))),rownames = names(data))
as.table(as.numeric(colSums(is.na(data))),row.names = names(data))
names(data)
as.table(as.numeric(colSums(is.na(data))),row.names = c(names(data)))
as.table(as.numeric(colSums(is.na(data))),col.names = TRUE)
as.table(as.numeric(colSums(is.na(data))),col.names = names(data))
as.table(as.numeric(colSums(is.na(data))),dnn = names(data))
table(data, useNA = "ifany")
as.table(as.numeric(colSums(is.na(data))),dnn = names(data))
as.table(as.numeric(colSums(is.na(data))),col.names = names(data))
as.table(as.numeric(colSums(is.na(data))),row.names = c(names(data)))
as.table(as.numeric(colSums(is.na(data))),row.names = names(data))
as.table(as.numeric(colSums(is.na(data))))
test3 <- as.numeric(colSums(is.na(data)))
table(test3)
test3
fillNA <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (data.interval[data.interval$interval==interval, "avgsteps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
fillNA <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (data.interval[data.interval$interval==interval, "avgsteps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fillNA, filled.data$steps, filled.data$interval)
View(filled.data)
View(data)
?mapply
fillNA <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (data.interval[data.interval$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fillNA, filled.data$steps, filled.data$interval)
View(filled.data)
check <- rbind(names(filled.data), as.numeric(colSums(is.na(filled.data))))
check
class(check)
filled.sums <- ddply(filled.data, .(date), summarize, steps=sum(steps, na.rm = TRUE))
qplot(filled.sums$steps, geom = "histogram", main = "Total Number of Steps per Day",
xlab="Steps", ylab = "Frequency", binwidth = 1000)
mean <- mean(filled.sums$steps)
mean
median <- median(filled.sums$steps)
median
mean1; mean2
mean2 <- mean(filled.sums$steps)
mean2
median2 <- median(filled.sums$steps)
median2
mean1; mean2
mean1 <- mean(data.sums$steps)
mean1
median1 <- median(data.sums$steps)
median1
mean1; mean2
median1; median2
day.cat <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$daytype <- sapply(filled.data$date, FUN = day.cat)
View(filled.data)
table(filled.data$daytype)
str(filled.data)
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, mean)
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, mean)
?aggregate
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, mean)
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, FUN=mean)
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, FUN = "mean")
View(daytype.mean)
str(daytype.mean)
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, FUN = "mean")
ggplot(daytype.mean, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-Minute Interval") +
ylab("Mean Number of Steps")
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, FUN = "mean")
ggplot(daytype.mean, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-Minute Interval") +
ylab("Mean Number of Steps") +
main("Comparison of Mean Number of Steps per 5-Minute Interval for Weekdays vs. Weekends")
daytype.mean <- aggregate(steps ~ interval + daytype, data = filled.data, FUN = "mean")
ggplot(daytype.mean, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
labs(title = "Comparison of Mean Number of Steps per 5-Minute Interval for Weekdays vs. Weekends") +
xlab("5-Minute Interval") +
ylab("Mean Number of Steps")
max.weekday <- daytype.mean[which.max(daytype$steps),]
max.weekday <- daytype.mean[which.max(daytype.mean$steps),]
max.weekday
This document outlines the steps taken to import, display and analyze data from a
setwd("~/Documents/Reproducible Research/RepData_PeerAssessment1")
View(data)
?geom_line
max.daytype <- daytype.mean[which.max(daytype.mean$steps),]
max.daytype
fig_path(suffix = ".png", options = opts_current$get())
?fig_path
fig_path(".pdf", list(fig.path = "figure/abc-", label = "first-plot"))
library(plyr)
library (knitr)
library(ggplot2)
library(data.table)
opt_chunk$set(fig.path="figures/")
knit2html
opts_chunk$set(fig.path="figures/")
install.packages("prob")
library(prop)
library(prob)
tosscoin(1)
tosscoin(3)
rolldie(1)
rolldie(6)
head(cards())
urnsamples(1:9, size = 3, replace = FALSE, ordered = FALSE)
urnsamples(1:9, size = 3)
urnsamples(1:3, size = 2, replace = FALSE, ordered = FALSE)
urnsamples(1:9, size = 3, replace = FALSE, ordered = FALSE)
tosscoin(5)
urnsamples(1:2, size = 5, replace = FALSE, ordered = FALSE)
urnsamples(1:5, size = 2, replace = FALSE, ordered = FALSE)
urnsamples(1:2, size = 2, replace = TRUE, ordered = FALSE)
urnsamples(1:2, size = 5, replace = TRUE, ordered = FALSE)
urnsamples(0:1, size = 5, replace = TRUE, ordered = FALSE)
urnsamples(0:1, size = 5, replace = TRUE, ordered = FALSE, makespace = TRUE)
tosscoin(5)
tosscoin(5)
rolldie(5, nsides=2)
tosscoin(5)
test <- tosscoin(5)
test
str(test)
S <- tosscoin(10, makespace = TRUE)
x <-tosscoin(10, makespace = TRUE)
A <- subset(x, isrep(x, vals = "T", nrep = 10))
a
A
x <-tosscoin(5, makespace = TRUE)
x
A <- subset(x, isrep(x, vals = "T", nrep = 4))
A
x <-tosscoin(5, makespace = TRUE)
A <- subset(x, isrep(x, vals = "H", nrep = 4,5))
A
A <- subset(x, isrep(x, vals = "H", nrep > 4))
sum (A$probs)
B <- subset(x, isrep(x, vals = "T", nrep = 5))
B
sum(A$probs, B$probs)
B <- subset(x, isrep(x, vals = "H", nrep = 5))
sum(A$probs, B$probs)
qnorm(.95,mean=1100,sd=75)
x <-tosscoin(5, makespace = TRUE)
x
?countrep
countrep(x, nrep=4)
dbinom(4, size=5, prob=0.5)
dbinom(5, size=4, prob=0.5) + dbinom(5, size=5, prob=0.5)
4 <- dbinom(5, size=4, prob=0.5)
x <- dbinom(5, size=4, prob=0.5)
x <- dbinom(5, size=5, prob=0.5)
y <- dbinom(5, size=4, prob=0.5)
x=y
x+y
y <- dbinom(5, size=4, prob=0.5)
x <- dbinom(5, size=5, prob=0.5)
x+y
x
round(pnorm(93, mean=100, sd=10))
round(pnorm(93, mean=100, sd=10)*100)
?qnorm
round(qnorm(95, mean=100, sd=10), 3)
round(qnorm(0.95, mean=100, sd=10), 3)
